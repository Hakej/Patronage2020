/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IReversedStringClient {
    getReversedStringHistory(): Observable<ReversedStringHistoryDto>;
    getReversedString(stringToReverse: string | null): Observable<ReversedStringDto>;
}

@Injectable()
export class ReversedStringClient implements IReversedStringClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getReversedStringHistory(): Observable<ReversedStringHistoryDto> {
        let url_ = this.baseUrl + "/api/ReversedString";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReversedStringHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReversedStringHistory(<any>response_);
                } catch (e) {
                    return <Observable<ReversedStringHistoryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReversedStringHistoryDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetReversedStringHistory(response: HttpResponseBase): Observable<ReversedStringHistoryDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReversedStringHistoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReversedStringHistoryDto>(<any>null);
    }

    getReversedString(stringToReverse: string | null): Observable<ReversedStringDto> {
        let url_ = this.baseUrl + "/api/ReversedString/stringToReverse?";
        if (stringToReverse === undefined)
            throw new Error("The parameter 'stringToReverse' must be defined.");
        else
            url_ += "stringToReverse=" + encodeURIComponent("" + stringToReverse) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReversedString(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReversedString(<any>response_);
                } catch (e) {
                    return <Observable<ReversedStringDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ReversedStringDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetReversedString(response: HttpResponseBase): Observable<ReversedStringDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReversedStringDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReversedStringDto>(<any>null);
    }
}

export interface IWritingFileClient {
    getWritingFile(id: number): Observable<WritingFileDto>;
    postWritingFile(content: string | null): Observable<WritingFileDto>;
    putOneLine(newLine: string | null): Observable<WritingFileDto>;
}

@Injectable()
export class WritingFileClient implements IWritingFileClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getWritingFile(id: number): Observable<WritingFileDto> {
        let url_ = this.baseUrl + "/api/WritingFile/id?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWritingFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWritingFile(<any>response_);
                } catch (e) {
                    return <Observable<WritingFileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<WritingFileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetWritingFile(response: HttpResponseBase): Observable<WritingFileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WritingFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WritingFileDto>(<any>null);
    }

    postWritingFile(content: string | null): Observable<WritingFileDto> {
        let url_ = this.baseUrl + "/api/WritingFile/content?";
        if (content === undefined)
            throw new Error("The parameter 'content' must be defined.");
        else
            url_ += "content=" + encodeURIComponent("" + content) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostWritingFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostWritingFile(<any>response_);
                } catch (e) {
                    return <Observable<WritingFileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<WritingFileDto>><any>_observableThrow(response_);
        }));
    }

    protected processPostWritingFile(response: HttpResponseBase): Observable<WritingFileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WritingFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WritingFileDto>(<any>null);
    }

    putOneLine(newLine: string | null): Observable<WritingFileDto> {
        let url_ = this.baseUrl + "/api/WritingFile/line?";
        if (newLine === undefined)
            throw new Error("The parameter 'newLine' must be defined.");
        else
            url_ += "newLine=" + encodeURIComponent("" + newLine) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutOneLine(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutOneLine(<any>response_);
                } catch (e) {
                    return <Observable<WritingFileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<WritingFileDto>><any>_observableThrow(response_);
        }));
    }

    protected processPutOneLine(response: HttpResponseBase): Observable<WritingFileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WritingFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WritingFileDto>(<any>null);
    }
}

export class ReversedStringHistoryDto implements IReversedStringHistoryDto {
    history?: string[] | undefined;

    constructor(data?: IReversedStringHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["history"])) {
                this.history = [] as any;
                for (let item of data["history"])
                    this.history!.push(item);
            }
        }
    }

    static fromJS(data: any): ReversedStringHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReversedStringHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item);
        }
        return data; 
    }
}

export interface IReversedStringHistoryDto {
    history?: string[] | undefined;
}

export class ReversedStringDto implements IReversedStringDto {
    reversedString?: string | undefined;

    constructor(data?: IReversedStringDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reversedString = data["reversedString"];
        }
    }

    static fromJS(data: any): ReversedStringDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReversedStringDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reversedString"] = this.reversedString;
        return data; 
    }
}

export interface IReversedStringDto {
    reversedString?: string | undefined;
}

export class WritingFileDto implements IWritingFileDto {
    id?: number;
    content?: string | undefined;

    constructor(data?: IWritingFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.content = data["content"];
        }
    }

    static fromJS(data: any): WritingFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new WritingFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        return data; 
    }
}

export interface IWritingFileDto {
    id?: number;
    content?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}